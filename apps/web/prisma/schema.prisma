// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Link to our app_user
  appUser       AppUser?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application-specific tables
model Family {
  id          String    @id @default(uuid())
  name        String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  // Relations
  users       AppUser[]
  folders     Folder[]
  lists       List[]
  tasks       Task[]
  shoppingItems ShoppingItem[]

  @@map("families")
}

model AppUser {
  id           String   @id @default(uuid())
  userId       String   @unique  // Link to NextAuth User
  familyId     String
  role         Role     @default(ADULT)
  email        String
  displayName  String?
  avatar       String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  family       Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  ownedFolders Folder[] @relation("FolderOwner")
  ownedLists   List[]   @relation("ListOwner")
  ownedTasks   Task[]   @relation("TaskOwner")
  assignedTasks Task[]  @relation("TaskAssignee")

  @@map("app_users")
}

model Folder {
  id          String     @id @default(uuid())
  name        String
  color       String?
  familyId    String
  ownerId     String
  visibility  Visibility @default(FAMILY)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  
  // Relations
  family      Family     @relation(fields: [familyId], references: [id], onDelete: Cascade)
  owner       AppUser    @relation("FolderOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  lists       List[]

  @@map("folders")
}

model List {
  id          String     @id @default(uuid())
  name        String
  description String?
  color       String?
  familyId    String
  ownerId     String
  folderId    String?
  visibility  Visibility @default(FAMILY)
  listType    ListType   @default(TODO)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  
  // Relations
  family      Family     @relation(fields: [familyId], references: [id], onDelete: Cascade)
  owner       AppUser    @relation("ListOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  folder      Folder?    @relation(fields: [folderId], references: [id], onDelete: SetNull)
  tasks       Task[]
  shoppingItems ShoppingItem[]

  @@map("lists")
}

model Task {
  id          String      @id @default(uuid())
  title       String
  description String?
  familyId    String
  listId      String
  ownerId     String
  assigneeId  String?
  completed   Boolean     @default(false)
  priority    Priority    @default(MEDIUM)
  deadline    DateTime?
  recurrence  Recurrence?
  tags        String[]
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  
  // Relations
  family      Family      @relation(fields: [familyId], references: [id], onDelete: Cascade)
  list        List        @relation(fields: [listId], references: [id], onDelete: Cascade)
  owner       AppUser     @relation("TaskOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  assignee    AppUser?    @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  subtasks    Subtask[]

  @@map("tasks")
}

model Subtask {
  id          String   @id @default(uuid())
  taskId      String
  title       String
  completed   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model ShoppingItem {
  id          String   @id @default(uuid())
  familyId    String
  listId      String
  name        String
  category    String?
  quantity    Int      @default(1)
  unit        String?
  purchased   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@map("shopping_items")
}

model ShoppingDictionary {
  id       String @id @default(uuid())
  name     String @unique
  category String
  
  @@map("shopping_dictionary")
}

// Enums
enum Role {
  ADMIN
  ADULT
  CHILD
}

enum Visibility {
  PRIVATE
  FAMILY
  ADULT
}

enum ListType {
  TODO
  SHOPPING
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Recurrence {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}
