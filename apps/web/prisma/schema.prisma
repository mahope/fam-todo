// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Password hash (nullable for OAuth users)
  accounts      Account[]
  sessions      Session[]
  
  // Link to our app_user
  appUser       AppUser?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application-specific tables
model Family {
  id          String    @id @default(uuid())
  name        String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  // Relations
  users       AppUser[]
  folders     Folder[]
  lists       List[]
  tasks       Task[]
  shoppingItems ShoppingItem[]
  shoppingDictionary ShoppingDictionary[]
  invites     FamilyInvite[]
  activityLogs ActivityLog[]
  notifications Notification[]

  @@map("families")
}

model AppUser {
  id           String   @id @default(uuid())
  userId       String   @unique  // Link to NextAuth User
  familyId     String
  role         Role     @default(ADULT)
  email        String
  displayName  String?
  avatar       String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  family       Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  ownedFolders Folder[] @relation("FolderOwner")
  ownedLists   List[]   @relation("ListOwner")
  ownedTasks   Task[]   @relation("TaskOwner")
  assignedTasks Task[]  @relation("TaskAssignee")
  sentInvites  FamilyInvite[]
  activityLogs ActivityLog[]
  notifications Notification[]
  settings     UserSetting?
  completedOccurrences TaskOccurrence[] @relation("TaskOccurrenceCompletedBy")

  @@map("app_users")
}

model Folder {
  id          String     @id @default(uuid())
  name        String
  color       String?
  familyId    String
  ownerId     String
  visibility  Visibility @default(FAMILY)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  
  // Relations
  family      Family     @relation(fields: [familyId], references: [id], onDelete: Cascade)
  owner       AppUser    @relation("FolderOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  lists       List[]

  @@map("folders")
}

model List {
  id          String     @id @default(uuid())
  name        String
  description String?
  color       String?
  familyId    String
  ownerId     String
  folderId    String?
  visibility  Visibility @default(FAMILY)
  listType    ListType   @default(TODO)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  
  // Relations
  family      Family     @relation(fields: [familyId], references: [id], onDelete: Cascade)
  owner       AppUser    @relation("ListOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  folder      Folder?    @relation(fields: [folderId], references: [id], onDelete: SetNull)
  tasks       Task[]
  shoppingItems ShoppingItem[]

  @@map("lists")
}

model Task {
  id          String      @id @default(uuid())
  title       String
  description String?
  familyId    String
  listId      String
  ownerId     String
  assigneeId  String?
  completed   Boolean     @default(false)
  priority    Priority    @default(MEDIUM)
  deadline    DateTime?
  recurrence  Recurrence?
  tags        String[]
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  
  // Relations
  family      Family      @relation(fields: [familyId], references: [id], onDelete: Cascade)
  list        List        @relation(fields: [listId], references: [id], onDelete: Cascade)
  owner       AppUser     @relation("TaskOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  assignee    AppUser?    @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  subtasks    Subtask[]
  repeatRule  RepeatRule?
  occurrences TaskOccurrence[]

  @@map("tasks")
}

model Subtask {
  id          String   @id @default(uuid())
  taskId      String
  title       String
  completed   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model ShoppingItem {
  id          String   @id @default(uuid())
  familyId    String
  listId      String
  name        String
  category    String?
  quantity    Int      @default(1)
  unit        String?
  purchased   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@map("shopping_items")
}

model ShoppingDictionary {
  id             String    @id @default(uuid())
  key            String    // The search key (normalized name)
  familyId       String?   // null for global entries
  category       String    // bakery, produce, meat, etc.
  defaultUnit    String?   // kg, pcs, l, etc.
  synonyms       String[]  // Alternative names for search
  suggestionHits Int       @default(0) // How often this gets suggested
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  
  // Relations
  family         Family?   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  
  @@unique([familyId, key], name: "familyId_key")
  @@index([key])
  @@index([category])
  @@map("shopping_dictionary")
}

model ActivityLog {
  id          String   @id @default(uuid())
  familyId    String
  userId      String
  action      String   // CREATE, UPDATE, DELETE, etc.
  entityType  String   // list, task, folder, etc.
  entityId    String?
  entityName  String?
  metadata    Json?    // Additional data about the action
  created_at  DateTime @default(now())
  
  // Relations
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user        AppUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([familyId])
  @@index([entityType, entityId])
  @@map("activity_logs")
}

model Notification {
  id          String    @id @default(uuid())
  familyId    String
  userId      String
  type        String    // TASK_ASSIGNED, DEADLINE_REMINDER, etc.
  title       String
  message     String
  entityType  String?   // Optional reference to related entity
  entityId    String?
  read        Boolean   @default(false)
  sendAt      DateTime  @default(now())
  created_at  DateTime  @default(now())
  
  // Relations
  family      Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user        AppUser   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, read])
  @@index([userId, sendAt])
  @@map("notifications")
}

model UserSetting {
  id                    String   @id @default(uuid())
  userId                String   @unique
  theme                 String   @default("system")
  locale                String   @default("da")
  timezone              String   @default("Europe/Copenhagen")
  dateFormat            String   @default("DD/MM/YYYY")
  notificationsEnabled  Boolean  @default(true)
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(true)
  taskReminders         Boolean  @default(true)
  familyUpdates         Boolean  @default(true)
  defaultListVisibility Visibility @default(FAMILY)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  // Relations
  user                  AppUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}

model RepeatRule {
  id            String     @id @default(uuid())
  taskId        String     @unique
  type          Recurrence // DAILY, WEEKLY, MONTHLY, CUSTOM
  interval      Int        @default(1) // Every N days/weeks/months
  daysOfWeek    Int[]      // For weekly: [1,2,3] = Mon,Tue,Wed (1=Monday, 7=Sunday)
  dayOfMonth    Int?       // For monthly: specific day (1-31)
  endDate       DateTime?  // When to stop recurring
  maxOccurrences Int?      // Alternative to endDate
  skipWeekends  Boolean    @default(false)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  
  // Relations
  task          Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@map("repeat_rules")
}

model TaskOccurrence {
  id              String   @id @default(uuid())
  taskId          String   // Original recurring task
  occurrenceDate  DateTime // When this occurrence is due
  completed       Boolean  @default(false)
  completedAt     DateTime?
  completedBy     String?  // AppUser ID
  skipped         Boolean  @default(false)
  created_at      DateTime @default(now())
  
  // Relations
  task            Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  completedByUser AppUser? @relation("TaskOccurrenceCompletedBy", fields: [completedBy], references: [id])
  
  @@unique([taskId, occurrenceDate])
  @@index([occurrenceDate])
  @@map("task_occurrences")
}

model FamilyInvite {
  id          String   @id @default(uuid())
  familyId    String
  email       String
  role        Role     @default(ADULT)
  invitedBy   String
  token       String   @unique
  accepted    Boolean  @default(false)
  expires_at  DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  inviter     AppUser  @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  
  @@unique([familyId, email])
  @@map("family_invites")
}

// Enums
enum Role {
  ADMIN
  ADULT
  CHILD
}

enum Visibility {
  PRIVATE
  FAMILY
  ADULT
}

enum ListType {
  TODO
  SHOPPING
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Recurrence {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}
